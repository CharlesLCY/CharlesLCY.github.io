{"meta":{"title":"Born To Do","subtitle":null,"description":"There is nothing you can complain about, it all depends on human effort.","author":"Charlie","url":"http://lichaoyu.com"},"pages":[],"posts":[{"title":"Java反射机制总结","slug":"Java反射机制总结","date":"2018-06-13T05:04:46.000Z","updated":"2018-06-16T03:44:34.999Z","comments":true,"path":"2018/06/13/Java反射机制总结/","link":"","permalink":"http://lichaoyu.com/2018/06/13/Java反射机制总结/","excerpt":"","text":"Java反射机制总结反射的概念在Java中程序可以访问、检测和修改它自身状态或行为的一种能力。简单来说，就是只要给定类的名字，就可以知道这个类的所有属性和方法，这种动态获取信息以及动态调用对象方法的功能成为Java语言的反射机制。 反射的作用 在运行时判断任意一个对象所属的类； 在运行时获取类的对象； 在运行时访问Java对象的属性，方法以及构造方法等。 反射的优缺点优点： 可以实现动态创建对象和编译，最大限度发挥了Java的灵活性，体现了多态的应用，有以降低类之间的藕合性。 缺点： （1）对性能有影响。 （2）使用反射相对来说不安全。 （3）破坏了类的封装性，可以通过反射获取这个类的私有方法和属性。 使用注意事项性能第一：反射包括了一些动态类型，所以JVM无法对这些代码进行优化。因此，反射操作的效率要比那些非反射操作低得多。我们应该避免在经常被 执行的代码或对性能要求很高的程序中使用反射。 安全限制：使用反射技术要求程序必须在一个没有安全限制的环境中运行。 内部暴露：由于反射允许代码执行一些在正常情况下不被允许的操作（比如访问私有的属性和方法），所以使用反射可能会导致意料之外的副作用——代码有功能上的错误，降低可移植性。反射代码破坏了抽象性，因此当平台发生改变的时候，代码的行为就有可能也随着变化。 使用示例 关于Class Class是一个类，一个描述类的类（也就是描述类本身），封装了描述方法的Method，描述字段的Filed，描述构造器的Constructor等属性 对象照镜子后（反射）可以得到的信息：某个类的数据成员名、方法和构造器、某个类到底实现了哪些接口。 对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包含了特定某个类的有关信息。 Class 对象只能由系统建立对象 一个类在 JVM 中只会有一个Class实例 获取Class有三种方法12345678910111213Class clazz = null;// 1.直接通过类名.class的方式得到clazz = Test.class;// 2.通过对象的getClass()方法获取Object obj = new Test();clazz = obj.getClass();// 3.通过全类名获取，用的比较多，但可能抛出ClassNotFoundException异常try &#123; clazz = Class.forName(\"com.lcy.demo.reflection.Test\"); System.out.println(\"通过全类名获取:\" + clazz);&#125; catch (ClassNotFoundException e) &#123; e.printStackTrace();&#125; 利用newInstance创建对象：调用的类必须有无参构造器123456Class clazz = Class.forName(\"com.java.reflection.Person\"); //使用Class类的newInstance()方法创建类的一个对象 //实际调用的类的那个 无参数的构造器（这就是为什么写的类的时候，要写一个无参数的构造器，就是给反射用的） //一般的，一个类若声明了带参数的构造器，也要声明一个无参数的构造器 Object obj = clazz.newInstance(); System.out.println(obj); 输出 Person{name=’null’, age=0} Java类加载器 12345678910111213141516// 获取一个系统的类加载器ClassLoader classLoader = ClassLoader.getSystemClassLoader();System.out.println(\"系统类加载器：\" + classLoader);// 获取系统类加载器的父类加载器（扩展加载器）classLoader = classLoader.getParent();System.out.println(\"扩展加载器：\" + classLoader);// 获取扩展加载器的父类加载器// 输出为NULL，无法被Java程序直接引用classLoader = classLoader.getParent();System.out.println(\"启动类加载器\" + classLoader);// 测试当前类由哪个加载器加载，结果就是系统的类加载器classLoader = Class.forName(\"com.lcy.demo.reflection.Test\").getClassLoader();System.out.println(\"当前类由哪个类加载：\" + classLoader);// 测试JDK提供的Object类由哪个类加载器加载classLoader = Class.forName(\"java.lang.Object\").getClassLoader();System.out.println(\"Object类由哪个类加载：\" + classLoader); 系统的类加载器–&gt;sun.misc.LauncherAppClassLoader@43be2d65 扩展类加载器–&gt;sun.misc.LauncherExtClassLoader@7a9664a1 启动类加载器–&gt;null 当前类由哪个类加载器进行加载–&gt;sun.misc.Launcher$AppClassLoader@43be2d65 JDK提供的Object类由哪个类加载器加载–&gt;null getResourceAsStream()：类加载器的一个主要方法，获取类路径下的文件对应的输入流。 12345678910InputStream in = classLoader.getResourceAsStream(\"com/lcy/demo/reflection/test.properties\"); try &#123; Properties properties = new Properties(); properties.load(in); System.out.println(properties.getProperty(\"driver\")); System.out.println(new String(properties.getProperty(\"user\").getBytes(\"ISO-8859-1\"), \"UTF-8\")); System.out.println(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; Method：类中方法获取clazz对应类中除私有方法外的所有方法 1Method[] methods = clazz.getMethods(); 获取clazz当前类中声明的所有方法 1Method[] declaredMethods = clazz.getDeclaredMethods(); 获取指定方法 1Method method = clazz.getDeclaredMethod(\"setName\", String.class); Invoke()12345Method method = clazz.getDeclaredMethod(\"privateMethod\");// 通过反射执行private方法 method.setAccessible(true);Object obj = clazz.newInstance();method.invoke(obj, \"lcy\"); Field字段123456789101112//1.1 获取Field的数组,私有字段也能获取 Field[] fields = clazz.getDeclaredFields(); //1.2 获取指定名字的Field（如果是私有的，见下面的4) Field field = clazz.getDeclaredField(\"name\"); Person person = new Person(\"ABC\", 12); //2、获取指定对象的Field的值 Object val = field.get(person); //3、设置指定对象的Field的值 field.set(person, \"changwen2\"); //4、若该字段是私有的，需要调用setAccessible(true)方法 Field field2 = clazz.getDeclaredField(\"age\"); field2.setAccessible(true); 构造器(Constructor)1234//1.获取Constructor对象 Constructor&lt;Person&gt; constructor = clazz.getConstructor(String.class, Integer.class); //2.调用构造器的newInstance()方法创建对象 Object obj= constructor.newInstance(\"changwen\", 11);","categories":[{"name":"Android","slug":"Android","permalink":"http://lichaoyu.com/categories/Android/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://lichaoyu.com/tags/Java/"},{"name":"Reflection","slug":"Reflection","permalink":"http://lichaoyu.com/tags/Reflection/"}]},{"title":"Android8.0通知适配（NotificationChannel）","slug":"android8-0-notification","date":"2018-05-17T05:10:37.000Z","updated":"2018-05-18T04:27:46.822Z","comments":true,"path":"2018/05/17/android8-0-notification/","link":"","permalink":"http://lichaoyu.com/2018/05/17/android8-0-notification/","excerpt":"","text":"Android8.0 NotificationCannelNotificationCannel是Android8.0的新特性，如果App的targetSDKVersion&gt;=26，没有设置channel通知渠道的话，就会导致通知无法展示。 Android O 引入了 通知渠道（Notification Channels），以提供统一的系统来帮助用户管理通知，如果是针对 android O 为目标平台时，必须实现一个或者多个通知渠道，以向用户显示通知。比如聊天软件，为每个聊天组设置一个通知渠道，指定特定声音、灯光等配置。 国内app基本都集成了第三方推送SDK，目前使用的两个推送平台都还没进行适配，所以还需要等第三方出新版本并集成，如果我们app内部也有自己弹出通知逻辑，最好和他们保持一致，毕竟app内设置多个通知渠道不方便维护。 报错内容： Failed to post notification on channel “null” Target Api is 26 原因： 目前NotificationCompat.Builder(context)方法已deprecated，在Android 8.0系统推荐使用NotificationCompat.Builder(context, channelId)方法，为通知设置相应渠道。 解决方案： 下面是一个通知管理类，包含Android8.0通知处理逻辑，仅供参考。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788public class NotificationUtils extends ContextWrapper &#123; private NotificationManager manager; public static final int NOTIFICATION_ID = 1; public static final String CHANNEL_ID = \"channel_1\"; public static final String CHANNEL_NAME = \"channel_name_1\"; public NotificationUtils(Context context) &#123; super(context); &#125; /** * 创建通知渠道 **/ @RequiresApi(api = Build.VERSION_CODES.O) public void createNotificationChannel() &#123; NotificationChannel channel = new NotificationChannel(CHANNEL_ID, CHANNEL_NAME, NotificationManager.IMPORTANCE_HIGH); channel.enableLights(true); //是否在桌面icon右上角展示小红点 channel.setLightColor(Color.GREEN); //小红点颜色 channel.setShowBadge(true); //是否在久按桌面图标时显示此渠道的通知 getManager().createNotificationChannel(channel); &#125; private NotificationManager getManager() &#123; if (manager == null) &#123; manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE); &#125; return manager; &#125; /** * 初始化NotificationCompat.Builder * 适配android 8.0 */ private NotificationCompat.Builder getNotification(String title, String content, NotificationItem item) &#123; NotificationCompat.Builder builder; if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123; createNotificationChannel(); //设置渠道，channelId要与创建时的channelId对应 builder = new NotificationCompat.Builder(getApplicationContext(), CHANNEL_ID); &#125; else &#123; builder = new NotificationCompat.Builder(getApplicationContext()); &#125; builder.setContentTitle(title) .setContentText(content) .setSmallIcon(android.R.drawable.stat_notify_more) .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.logo)) .setWhen(System.currentTimeMillis()) .setPriority(NotificationCompat.PRIORITY_HIGH) .setDefaults(NotificationCompat.DEFAULT_SOUND | NotificationCompat .DEFAULT_VIBRATE) // 设置默认铃声与震动 .setFullScreenIntent(initPendingIntent(item), true) //悬挂式通知 .setContentIntent(initPendingIntent(item)) .setVisibility(NotificationCompat.VISIBILITY_PUBLIC) // 锁屏通知，显示通知全部内容 .setAutoCancel(true); return builder; &#125; /** * 点击通知后跳转意图，开发者可自行定义item类，根据不同的type处理各业务逻辑，如相应跳转等。 */ private PendingIntent initPendingIntent(NotificationItem item) &#123; Intent intent = new Intent(getApplicationContext(), MainActivity.class); intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); PendingIntent pi = PendingIntent.getActivity(this, 0, intent, 0); return pi; &#125; /** * 显示通知 */ public void sendNotification(String title, String content, NotificationItem item) &#123; Notification notification = getNotification(title, content, item).build(); getManager().notify(NOTIFICATION_ID, notification); &#125; /** * 取消通知 */ public void cancelNotification() &#123; if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123; getManager().deleteNotificationChannel(CHANNEL_ID); &#125; getManager().cancel(NOTIFICATION_ID); &#125;&#125; 管理类具体使用： 12NotificationUtils notificationUtils = new NotificationUtils(this);notificationUtils.sendNotification(\"通知标题\", \"通知内容\", entity); Android Notification 四种方式部分参考 https://blog.csdn.net/yxncl/article/details/72801230 实现通知的一般步骤 获取NotificationManager实例来管理通知； 实例Notification对象； 管理点击事件Intent，PendingIntent； 发送通知(notificationManager.notify(id, notification)) 使用NotificationCompat.Builder是为了解决Notification.Builder的兼容问题，可最低支持API Level 4。 普通通知获取NotificationManager实例对象： 1NotificationManager manager = (NotificationManager) context.getSystemService(NOTIFICATION_SERVICE); 通过NotificationCompat.Builder创建Notification对象，可以通过builder相应方法进行设置： 1234567891011Notification notication = new NotificationCompat.Builder(this) .setContentTitle(title) .setContentText(content) .setContentIntent(pi) //设置点击逻辑 .setOngoing(true) //true则用户不能手动清除 setAutoCancel(true)点击之后消失 .setPriority(NotificationCompat.PRIORITY_HIGH) // 设置通知优先级 .setSmallIcon(R.mipmap.ic_launcher_round) // 设置状态栏小图标 .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher)) // 设置下拉通知栏中的icon .setWhen(System.currentTimeMillis()) // 设置通知显示时间为当前时间戳，立即显示 .setDefaults(NotificationCompat.DEFAULT_SOUND | NotificationCompat.DEFAULT_VIBRATE) // 设置默认声音和震动效果 .build(); 设置点击通知后逻辑，自行根据相应业务： 123Intent intent = new Intent(this, NotificationActivity.class);intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);PendingIntent pi = PendingIntent.getActivity(this, 0, intent, 0); 显示通知，参数一的id指定通知的唯一id： 1manager.notify(NOTIFICATION_ID, notification); 取消通知： 1manager.cancel(NOTIFICATION_ID); 悬挂式通知1builder.setFullScreenIntent(pi, true) setPriority()方法共有5个等级： PRIORITY_MIN - 最低级别（-2）； PRIORITY_LOW - 较低级别（-1）； PRIORITY_DEFAULT - 默认级别（0）； PRIORITY_HIGH - 较高级别（1）； PRIORITY_MAX - 最高级别（2）； 当发出此类型的通知时，通知会以悬挂的方法显示在屏幕上。 折叠通知折叠式同时需要借助 RemoteViews 来实现 123456789101112131415161718192021222324Notification builder = new NotificationCompat.Builder(Context); Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(&quot;https://www.sina.com&quot;)); PendingIntent pi = PendingIntent.getActivity(this, 0, intent, 0); // 未下拉的样式 R.layout.collapsed RemoteViews collapsed = new RemoteViews(getPackageName(), R.layout.collapsed); collapsed.setTextViewText(R.id.collapsed_text, &quot;关闭状态&quot;); //下拉后的样式R.layout.show RemoteViews show = new RemoteViews(getPackageName(), R.layout.show); Notification notify = builder.setAutoCancel(true) .setSmallIcon(R.mipmap.ic_launcher_round) .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher)) .setContentIntent(pi) .setContentText(&quot;新浪微博&quot;) .setCustomContentView(collapsed)//下拉前 .setCustomBigContentView(show)//下拉后 .build(); NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE); manager.notify(0, notify); 锁屏通知1builder.setVisibility(NotificationCompat.VISIBILITY_PUBLIC) setVisibility() 方法共有三个选值： VISIBILITY_PRIVATE : 显示基本信息，如通知的图标，但隐藏通知的全部内容； VISIBILITY_PUBLIC : 显示通知的全部内容； VISIBILITY_SECRET : 不显示任何内容，包括图标。 不足之处欢迎指出，码农不易，携手共进^~^","categories":[{"name":"Android","slug":"Android","permalink":"http://lichaoyu.com/categories/Android/"}],"tags":[{"name":"Android8.0","slug":"Android8-0","permalink":"http://lichaoyu.com/tags/Android8-0/"},{"name":"Notification","slug":"Notification","permalink":"http://lichaoyu.com/tags/Notification/"}]},{"title":"ES6的十大特性","slug":"ES6的十大特性","date":"2018-05-13T15:59:23.000Z","updated":"2018-05-13T23:47:42.438Z","comments":true,"path":"2018/05/13/ES6的十大特性/","link":"","permalink":"http://lichaoyu.com/2018/05/13/ES6的十大特性/","excerpt":"","text":"你好ES6","categories":[{"name":"FE","slug":"FE","permalink":"http://lichaoyu.com/categories/FE/"}],"tags":[{"name":"IT","slug":"IT","permalink":"http://lichaoyu.com/tags/IT/"},{"name":"前端","slug":"前端","permalink":"http://lichaoyu.com/tags/前端/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://lichaoyu.com/tags/JavaScript/"}]},{"title":"Android Studio","slug":"android1","date":"2018-05-07T09:05:06.000Z","updated":"2018-05-07T09:22:10.458Z","comments":true,"path":"2018/05/07/android1/","link":"","permalink":"http://lichaoyu.com/2018/05/07/android1/","excerpt":"","text":"Welcome to my own zone, first of all, let me introduce something to you, then you can communicate with me for android development problems, Let’s start. 第一步这是第一步123public static void main(String[] args)&#123; println(\"Hello World!\");&#125; 第二步这是第二步 123456789101112131415public static AlertDialog showDefaultDialog(Activity activity, @StringRes int title, @StringRes int content, boolean cancelable, @StringRes int confirm, @StringRes int cancel, DialogInterface.OnClickListener confirmListener, DialogInterface.OnClickListener cancelListener) &#123; return new AlertDialog.Builder(activity) .setTitle(title) .setMessage(content) .setCancelable(cancelable) .setNegativeButton(confirm, confirmListener) .setPositiveButton(cancel, cancelListener) .setOnDismissListener(new DialogInterface.OnDismissListener() &#123; @Override public void onDismiss(DialogInterface dialog) &#123; dialog.dismiss(); &#125; &#125;) .show(); &#125; 第三步这是第三步 123456789101112131415161718192021222324addCompositeDisposable( getBaseModel().logout(), new RxObserver&lt;Object&gt;() &#123; /** * 数据流传递的结果 * * @param result */ @Override public void response(Object result) &#123; getBaseView().onLogoutSuccess(App.mAppContext.getString(R.string.log_out)); &#125; /** * 数据流过程中出现错误 * * @param message 不为空 */ @Override public void error(String message) &#123; getBaseView().onLogoutFail(message); &#125; &#125; );","categories":[{"name":"Android","slug":"Android","permalink":"http://lichaoyu.com/categories/Android/"}],"tags":[{"name":"IT","slug":"IT","permalink":"http://lichaoyu.com/tags/IT/"},{"name":"Java","slug":"Java","permalink":"http://lichaoyu.com/tags/Java/"},{"name":"Android","slug":"Android","permalink":"http://lichaoyu.com/tags/Android/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-05-05T12:19:50.665Z","updated":"2018-05-07T05:35:01.707Z","comments":true,"path":"2018/05/05/hello-world/","link":"","permalink":"http://lichaoyu.com/2018/05/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}